let arg,inquirer,createProject;_681‍.x([["cli",()=>cli]]);_681‍.w("arg",[["default",["arg"],function(v){arg=v}]]);_681‍.w("inquirer",[["default",["inquirer"],function(v){inquirer=v}]]);_681‍.w("./main",[["createProject",["createProject"],function(v){createProject=v}]]);



function parseArgumentsIntoOptions(rawArgs) {
    const args = arg(
        {
            "--git": Boolean,
            "--yes": Boolean,
            "--install": Boolean,
            "-g": "--g",
            "-y": "--yes",
            "-i": "--install"
        },
        {
            argv: rawArgs.slice(2),
        }
    );
    return {
        skipPrompts: args["--yes"] || false,
        git: args["--git"] || false,
        template: args._[0],
        runInstall: args["--install"] || false,
    }
}

async function promptForMissingOptions(options) {
    const defalutTemplate = "EJS";
    if (options.skipPrompts) {
        return {
            ...options,
            template: options.template || defalutTemplate,
        };
    }

    const questions = [];
    if (!options.template) {
        questions.push({
            type: "list",
            name: "template",
            message: "Please choose which project template to use",
            choices: ["EJS", "HTML"],
        });
    }

    if (!options.git) {
        questions.push({
            type: "confirm",
            name: "git",
            message: "Initialize a git repository?",
            default: false,
        });
    }

    const answers = await inquirer.prompt(questions);
    return {
        ...options,
        template: options.template || answers.template,
        git: options.git || answers.git,
    };
}

       async function cli(args) {
    let options = parseArgumentsIntoOptions(args);
    options = await promptForMissingOptions(options);
    await createProject(options);
}