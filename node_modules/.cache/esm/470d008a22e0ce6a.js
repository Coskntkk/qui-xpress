let chalk,fs,ncp,path,promisify,fileURLToPath,execa,Listr,projectInstall,exec;_22e‍.x([["createProject",()=>createProject]]);_22e‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_22e‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_22e‍.w("ncp",[["default",["ncp"],function(v){ncp=v}]]);_22e‍.w("path",[["default",["path"],function(v){path=v}]]);_22e‍.w("util",[["promisify",["promisify"],function(v){promisify=v}]]);_22e‍.w("url",[["fileURLToPath",["fileURLToPath"],function(v){fileURLToPath=v}]]);_22e‍.w("execa",[["default",["execa"],function(v){execa=v}]]);_22e‍.w("listr",[["default",["Listr"],function(v){Listr=v}]]);_22e‍.w("pkg-install",[["projectInstall",["projectInstall"],function(v){projectInstall=v}]]);_22e‍.w("child_process",[["exec",["exec"],function(v){exec=v}]]);










const access = promisify(fs.access);
const copy = promisify(ncp);

async function copyTemplateFiles(options) {
 return copy(options.templateDirectory, options.targetDirectory, {
   clobber: false,
 });
}

async function initGit(options) {
    const result = await execa("git", ["init"], {
        cwd: options.targetDirectory,
    });
    if (result.failed) {
        return Promise.reject(new Error("Failed to initialize Git"));
    }
    return;
}

       async function createProject(options) {
 options = {
   ...options,
   targetDirectory: options.targetDirectory || process.cwd(),
 };

 const currentFileUrl = _22e‍._.meta.url;
 const templateDir = path.resolve(
    fileURLToPath(_22e‍._.meta.url),
    '../../templates',
    options.template.toLowerCase()
);
 options.templateDirectory = templateDir;

 try {
   await access(templateDir, fs.constants.R_OK);
 } catch (err) {
   _22e‍.g.console.error('%s Invalid template name', chalk.red.bold('ERROR'));
   process.exit(1);
 }

 const tasks = new Listr([
     {
         title: "Copy project files",
         task: () => copyTemplateFiles(options),
     },
     {
         title: "Initialize git",
         task: () => initGit(options),
         enabled: () => options.git
     },
     {
         title: "Install dependencies",
         task: () => projectInstall({
             cwd: options.targetDirectory,
         }),
         skip: () => !options.runInstall ? "Pass --install to automaticly install dependencies" : undefined,
     },
 ]);

 await tasks.run();

 _22e‍.g.console.log('%s Project ready', chalk.green.bold('DONE'));
 return true;
}